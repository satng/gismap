define(["./arrayRemoveDuplicates-1a15bd09","./Transforms-4ee811db","./Matrix2-c430e55a","./RuntimeError-8952249c","./ComponentDatatype-9e86ac8f","./CoplanarPolygonGeometryLibrary-b590b3cd","./defaultValue-81eec7ed","./GeometryAttribute-51ed9bde","./GeometryAttributes-32b29525","./GeometryInstance-68d87064","./GeometryPipeline-7b7ac762","./IndexDatatype-bed3935d","./PolygonGeometryLibrary-8e4bde12","./_commonjsHelpers-3aae1032-26891ab7","./combine-3c023bda","./WebGLConstants-508b9636","./OrientedBoundingBox-e31a0f8a","./EllipsoidTangentPlane-0152c019","./AxisAlignedBoundingBox-52bc7e5b","./IntersectionTests-4d132f79","./Plane-7e828ad8","./AttributeCompression-046b70bd","./EncodedCartesian3-a57a8b60","./ArcType-fc72c06c","./EllipsoidRhumbLine-c86f0674","./PolygonPipeline-0605b100"],(function(e,t,n,o,r,i,a,c,y,s,l,p,d,u,m,b,g,f,h,P,G,C,k,L,H,T){"use strict";function E(e){const t=e.length,n=new Float64Array(3*t),o=p.IndexDatatype.createTypedArray(t,2*t);let i=0,a=0;for(let r=0;r<t;r++){const c=e[r];n[i++]=c.x,n[i++]=c.y,n[i++]=c.z,o[a++]=r,o[a++]=(r+1)%t}const s=new y.GeometryAttributes({position:new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:n})});return new c.Geometry({attributes:s,indices:o,primitiveType:c.PrimitiveType.LINES})}function A(e){const t=(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).polygonHierarchy;o.Check.defined("options.polygonHierarchy",t),this._polygonHierarchy=t,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=d.PolygonGeometryLibrary.computeHierarchyPackedLength(t)+1}A.fromPositions=function(e){return e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT),o.Check.defined("options.positions",e.positions),new A({polygonHierarchy:{positions:e.positions}})},A.pack=function(e,t,n){return o.Check.typeOf.object("value",e),o.Check.defined("array",t),n=a.defaultValue(n,0),t[n=d.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};const _={polygonHierarchy:{}};return A.unpack=function(e,t,n){o.Check.defined("array",e),t=a.defaultValue(t,0);const r=d.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=r.startingIndex,delete r.startingIndex;const i=e[t];return a.defined(n)||(n=new A(_)),n._polygonHierarchy=r,n.packedLength=i,n},A.createGeometry=function(o){const r=o._polygonHierarchy;let a=r.positions;if(a=e.arrayRemoveDuplicates(a,n.Cartesian3.equalsEpsilon,!0),a.length<3)return;if(!i.CoplanarPolygonGeometryLibrary.validOutline(a))return;const y=d.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(r,!1);if(0===y.length)return;const p=[];for(let e=0;e<y.length;e++){const t=new s.GeometryInstance({geometry:E(y[e])});p.push(t)}const u=l.GeometryPipeline.combineInstances(p)[0],m=t.BoundingSphere.fromPoints(r.positions);return new c.Geometry({attributes:u.attributes,indices:u.indices,primitiveType:u.primitiveType,boundingSphere:m})},function(e,t){return a.defined(t)&&(e=A.unpack(e,t)),e._ellipsoid=n.Ellipsoid.clone(e._ellipsoid),A.createGeometry(e)}}));